diff --git a/hc/src/hc_kernel.cl b/hc/src/hc_kernel.cl
index 40ef197..2c0821d 100644
--- a/hc/src/hc_kernel.cl
+++ b/hc/src/hc_kernel.cl
@@ -8,23 +8,24 @@
 ATTR uint
 amp_get_global_id(int dim)
 {
+  __constant hsa_kernel_dispatch_packet_t *p = __builtin_amdgcn_dispatch_ptr();
   uint l, g, s;
 
   switch(dim) {
   case 0:
     l = __builtin_amdgcn_workitem_id_x();
     g = __builtin_amdgcn_workgroup_id_x();
-    s = __builtin_amdgcn_workgroup_size_x();
+    s = p->workgroup_size_x;
     break;
   case 1:
     l = __builtin_amdgcn_workitem_id_y();
     g = __builtin_amdgcn_workgroup_id_y();
-    s = __builtin_amdgcn_workgroup_size_y();
+    s = p->workgroup_size_y;
     break;
   case 2:
     l = __builtin_amdgcn_workitem_id_z();
     g = __builtin_amdgcn_workgroup_id_z();
-    s = __builtin_amdgcn_workgroup_size_z();
+    s = p->workgroup_size_z;
     break;
   default:
     l = 0;
@@ -77,15 +78,15 @@ amp_get_num_groups(int dim)
     switch(dim) {
     case 0:
         n = p->grid_size_x;
-        d = __builtin_amdgcn_workgroup_size_x();
+        d = p->workgroup_size_x;
         break;
     case 1:
         n = p->grid_size_y;
-        d = __builtin_amdgcn_workgroup_size_y();
+        d = p->workgroup_size_y;
         break;
     case 2:
         n = p->grid_size_z;
-        d = __builtin_amdgcn_workgroup_size_z();
+        d = p->workgroup_size_z;
         break;
     default:
         n = 1;
diff --git a/ockl/inc/hsa.h b/ockl/inc/hsa.h
index 8536588..7606d9e 100644
--- a/ockl/inc/hsa.h
+++ b/ockl/inc/hsa.h
@@ -82,7 +82,7 @@
 // Try to detect CPU endianness
 #if !defined(LITTLEENDIAN_CPU) && !defined(BIGENDIAN_CPU)
 #if defined(__i386__) || defined(__x86_64__) || defined(_M_IX86) || \
-    defined(_M_X64)
+    defined(_M_X64) || defined(__aarch64__)
 #define LITTLEENDIAN_CPU
 #endif
 #endif
diff --git a/ockl/src/workitem.cl b/ockl/src/workitem.cl
index 5d1d58a..0ef0c88 100644
--- a/ockl/src/workitem.cl
+++ b/ockl/src/workitem.cl
@@ -29,23 +29,24 @@ __ockl_get_global_offset(uint dim)
 ATTR size_t
 __ockl_get_global_id(uint dim)
 {
+     __constant hsa_kernel_dispatch_packet_t *p = __builtin_amdgcn_dispatch_ptr();
     uint l, g, s;
 
     switch(dim) {
     case 0:
         l = __builtin_amdgcn_workitem_id_x();
         g = __builtin_amdgcn_workgroup_id_x();
-        s = __builtin_amdgcn_workgroup_size_x();
+        s = p->workgroup_size_x;
         break;
     case 1:
         l = __builtin_amdgcn_workitem_id_y();
         g = __builtin_amdgcn_workgroup_id_y();
-        s = __builtin_amdgcn_workgroup_size_y();
+        s = p->workgroup_size_y;
         break;
     case 2:
         l = __builtin_amdgcn_workitem_id_z();
         g = __builtin_amdgcn_workgroup_id_z();
-        s = __builtin_amdgcn_workgroup_size_z();
+        s = p->workgroup_size_z;
         break;
     default:
         l = 0;
@@ -113,17 +114,17 @@ __ockl_get_local_size(uint dim)
     switch(dim) {
     case 0:
         group_id = __builtin_amdgcn_workgroup_id_x();
-        group_size = __builtin_amdgcn_workgroup_size_x();
+        group_size = p->workgroup_size_x;
         grid_size = p->grid_size_x;
         break;
     case 1:
         group_id = __builtin_amdgcn_workgroup_id_y();
-        group_size = __builtin_amdgcn_workgroup_size_y();
+        group_size = p->workgroup_size_y;
         grid_size = p->grid_size_y;
         break;
     case 2:
         group_id = __builtin_amdgcn_workgroup_id_z();
-        group_size = __builtin_amdgcn_workgroup_size_z();
+        group_size = p->workgroup_size_z;
         grid_size = p->grid_size_z;
         break;
     default:
@@ -145,15 +146,15 @@ __ockl_get_num_groups(uint dim)
     switch(dim) {
     case 0:
         n = p->grid_size_x;
-        d = __builtin_amdgcn_workgroup_size_x();
+        d = p->workgroup_size_x;
         break;
     case 1:
         n = p->grid_size_y;
-        d = __builtin_amdgcn_workgroup_size_y();
+        d = p->workgroup_size_y;
         break;
     case 2:
         n = p->grid_size_z;
-        d = __builtin_amdgcn_workgroup_size_z();
+        d = p->workgroup_size_z;
         break;
     default:
         n = 1;
@@ -176,13 +177,15 @@ __ockl_get_work_dim(void) {
 ATTR size_t
 __ockl_get_enqueued_local_size(uint dim)
 {
+    __constant hsa_kernel_dispatch_packet_t *p = __builtin_amdgcn_dispatch_ptr();
+    
     switch(dim) {
     case 0:
-        return __builtin_amdgcn_workgroup_size_x();
+        return p->workgroup_size_x;
     case 1:
-        return __builtin_amdgcn_workgroup_size_y();
+        return p->workgroup_size_y;
     case 2:
-        return __builtin_amdgcn_workgroup_size_z();
+        return p->workgroup_size_z;
     default:
         return 1;
     }
@@ -199,7 +202,7 @@ __ockl_get_global_linear_id(void)
         {
             uint l0 = __builtin_amdgcn_workitem_id_x();
             uint g0 = __builtin_amdgcn_workgroup_id_x();
-            uint s0 = __builtin_amdgcn_workgroup_size_x();
+            uint s0 = p->workgroup_size_x;
             return g0*s0 + l0;
         }
     case 2:
@@ -208,8 +211,8 @@ __ockl_get_global_linear_id(void)
             uint l1 = __builtin_amdgcn_workitem_id_y();
             uint g0 = __builtin_amdgcn_workgroup_id_x();
             uint g1 = __builtin_amdgcn_workgroup_id_y();
-            uint s0 = __builtin_amdgcn_workgroup_size_x();
-            uint s1 = __builtin_amdgcn_workgroup_size_y();
+            uint s0 = p->workgroup_size_x;
+            uint s1 = p->workgroup_size_y;
             uint n0 = p->grid_size_x;
             uint i0 = g0*s0 + l0;
             uint i1 = g1*s1 + l1;
@@ -223,9 +226,9 @@ __ockl_get_global_linear_id(void)
             uint g0 = __builtin_amdgcn_workgroup_id_x();
             uint g1 = __builtin_amdgcn_workgroup_id_y();
             uint g2 = __builtin_amdgcn_workgroup_id_z();
-            uint s0 = __builtin_amdgcn_workgroup_size_x();
-            uint s1 = __builtin_amdgcn_workgroup_size_y();
-            uint s2 = __builtin_amdgcn_workgroup_size_z();
+            uint s0 = p->workgroup_size_x;
+            uint s1 = p->workgroup_size_y;
+            uint s2 = p->workgroup_size_z;
             uint n0 = p->grid_size_x;
             uint n1 = p->grid_size_y;
             uint i0 = g0*s0 + l0;
@@ -241,8 +244,8 @@ __ockl_get_global_linear_id(void)
 ATTR size_t
 __ockl_get_local_linear_id(void)
 {
-    return (__builtin_amdgcn_workitem_id_z() * __builtin_amdgcn_workgroup_size_y() +
-            __builtin_amdgcn_workitem_id_y()) * __builtin_amdgcn_workgroup_size_x() +
-           __builtin_amdgcn_workitem_id_x();
+    __constant hsa_kernel_dispatch_packet_t *p = __builtin_amdgcn_dispatch_ptr();
+    return (__builtin_amdgcn_workitem_id_z() * p->workgroup_size_y +
+            __builtin_amdgcn_workitem_id_y()) * p->workgroup_size_x + __builtin_amdgcn_workitem_id_x();
 }
 
